"use client";

import React from "react";
import { cn } from "@/shared/lib";
import { Button, Form, FormProps, Input } from "antd";
import { Modal } from ".";
import { Nunito } from "next/font/google";
import toast from "react-hot-toast";

interface Props {
  className?: string;
}
const nunito = Nunito({ subsets: ["cyrillic"] });

const TOKEN = "7511140017:AAFwr3hBCM-8_uBGsw1g1EqhKo9EIsc0SGA";
const CHAT_ID = "-1002408155374";


type FieldType = {
    firstName?: string;
    phone?: string;
};




export const ModalForm: React.FC<Props> = ({ className }) => {
  const [open, setOpen] = React.useState(false);
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [form] = Form.useForm()


 const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {

  const tgMessage = `üî• –ó–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞! %0A%0A` + `üë§ –ò–º—è:   ${values.firstName}` + '%0A' + `üìû –¢–µ–ª–µ—Ñ–æ–Ω:   ${values.phone}`;

  setIsSubmitting(true);

  await fetch(
  `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${tgMessage}`
  );

  toast.success('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');

  setOpen(false);
  setIsSubmitting(false);
  form.resetFields();
};



  return (
    <>
      <Button
        className={cn(
          "w-full max-w-[360px] h-[60px] text-xl",
          nunito.className,
          className
        )}
        type="primary"
        onClick={() => setOpen(true)}
      >
        –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
      </Button>
      <Modal isModalOpen={open} handleCancel={() => setOpen(false)}>
        <h3 className="text-xl font-medium mt-5 text-center">–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫</h3>
        <p  className="text-gray-400 font-medium text-center mt-5 text-base">–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –í–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.</p>
        <Form
          form={form}
          onFinish={onFinish}
          className="mt-10"
          layout="vertical"
        >
          <Form.Item<FieldType>
            label="–í–∞—à–µ –∏–º—è"
            name="firstName"
            rules={[{ required: true, message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" }, {min: 3, message: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ 3 —Å–∏–º–≤–æ–ª–∞"}]}
          >
            <Input />
          </Form.Item>

          <Form.Item<FieldType>
            label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
            name="phone"
            rules={[{required: true, message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä"}, { pattern: /^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$/, message: "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–æ–º–µ—Ä" }]}
  
          >
            <Input />
          </Form.Item>

          <Form.Item>
            <Button loading={isSubmitting} className="w-full mt-5" type="primary" htmlType="submit">
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
};
